# Sistema de Gestión de Inventarios 
# Este programa permite administrar productos en una tienda.
# Se puede añadir, eliminar, actualizar, buscar y mostrar productos.

import os

# Clase que representa un producto de la tienda
class Producto:
    def __init__(self, id_producto, nombre, cantidad, precio):
        # Constructor: aquí guardamos los datos básicos de un producto
        self.id = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    # Método para mostrar la información del producto en texto
    def __str__(self):
        return f"ID: {self.id}, Nombre: {self.nombre}, Cantidad: {self.cantidad}, Precio: ${self.precio:.2f}"

    # Convierte el producto en texto para guardarlo en el archivo
    def to_line(self):
        return f"{self.id},{self.nombre},{self.cantidad},{self.precio}\n"

    # Convierte una línea de texto del archivo otra vez en un objeto Producto
    @classmethod
    def from_line(cls, linea):
        try:
            id_producto, nombre, cantidad, precio = linea.strip().split(",")
            return cls(int(id_producto), nombre, int(cantidad), float(precio))  # usamos cls en lugar de Producto
        except ValueError:
            # Si hay un error en el archivo (datos corruptos), lo avisamos
            print(" Error al leer línea de archivo (dato dañado).")
            return None



# Clase Inventario el cual se guarda en un diccionario: {ID: Producto}.
# Además, esta clase se encarga de guardar y leer los productos del archivo.
class Inventario:
    ARCHIVO = "inventario.txt"  # Nombre del archivo donde se guardan los datos
    def __init__(self):
# Aquí guardamos TODOS los productos usando un diccionario.
# La clave será el ID del producto y el valor será el objeto Producto.
        self.productos = {}
        self.cargar_desde_archivo()  # Cuando se inicia, cargamos los datos desde el archivo

    # Método para guardar todos los productos en el archivo
    def guardar_en_archivo(self):
        try:
            with open(self.ARCHIVO, "w", encoding="utf-8") as f:
                for producto in self.productos.values():
                    f.write(producto.to_line())
        except PermissionError:
            print(" Error: No tienes permisos para guardar en el archivo.")
        except Exception as e:
            print(f" Error inesperado al guardar: {e}")

    # Método para cargar los productos que ya estaban guardados en el archivo
    def cargar_desde_archivo(self):
        if not os.path.exists(self.ARCHIVO):
            print(" No se encontró el archivo de inventario. Se creará uno nuevo.")
            return

        try:
            with open(self.ARCHIVO, "r", encoding="utf-8") as f:
                for linea in f:
                    producto = Producto.from_line(linea)
                    if producto:  # Solo añadimos si el producto es válido
                        self.productos[producto.id] = producto
        except FileNotFoundError:
            print(" Archivo no encontrado.")
        except PermissionError:
            print(" No tienes permisos para leer el archivo.")
        except Exception as e:
            print(f" Error inesperado al cargar: {e}")

    # Método para añadir un producto nuevo
    def añadir_producto(self, producto):
        if producto.id in self.productos:
            print(" Error: Ya existe un producto con ese ID.")
        else:
            self.productos[producto.id] = producto
            self.guardar_en_archivo()
            print(" Producto añadido con éxito y guardado en el archivo.")

    # Método para eliminar un producto
    def eliminar_producto(self, id_producto):
        if id_producto in self.productos:
            self.productos.pop(id_producto)
            self.guardar_en_archivo()
            print("Producto eliminado con éxito del inventario y archivo.")
        else:
            print(" No se encontró el producto con ese ID.")

    # Método para actualizar la cantidad o precio de un producto
    def actualizar_producto(self, id_producto, nueva_cantidad=None, nuevo_precio=None):
        if id_producto in self.productos:
            producto = self.productos[id_producto]
            if nueva_cantidad is not None:
                producto.cantidad = nueva_cantidad
            if nuevo_precio is not None:
                producto.precio = nuevo_precio
            self.guardar_en_archivo()
            print(" Producto actualizado con éxito y cambios guardados en el archivo.")
        else:
            print("No se encontró el producto con ese ID.")

    # Método para buscar un producto por nombre
    def buscar_producto(self, nombre):
        encontrados = [p for p in self.productos.values() if nombre.lower() in p.nombre.lower()]
        if encontrados:
            print(" Productos encontrados:")
            for p in encontrados:
                print(p)
        else:
            print(" No se encontraron productos con ese nombre.")

    # Método para mostrar todo el inventario
    def mostrar_productos(self):
        if self.productos:
            print("\n Inventario actual:")
            for p in self.productos.values():
                print(p)
        else:
            print(" El inventario está vacío.")


# Menú de usuario
# Aquí es donde el usuario puede elegir qué acción realizar.
def menu():
    inventario = Inventario()
# Opciones que verá el usuario en consola
    while True:
        print("\n==**== Sistema de Gestión de Inventarios Kerly ==**==")
        print("1. Añadir producto")
        print("2. Eliminar producto")
        print("3. Actualizar producto")
        print("4. Buscar producto por nombre")
        print("5. Mostrar todos los productos")
        print("6. Salir")

        opcion = input("Seleccione una opción: ")
        # Opción 1: añadir producto
        if opcion == "1":
            try:
                id_producto = int(input("Ingrese ID: "))
                nombre = input("Ingrese nombre: ")
                cantidad = int(input("Ingrese cantidad: "))
                precio = float(input("Ingrese precio: "))
                producto = Producto(id_producto, nombre, cantidad, precio)
                inventario.añadir_producto(producto)
            except ValueError:
                print(" Error: datos inválidos. Intente de nuevo.")
        # Opción 2: eliminar producto
        elif opcion == "2":
            try:
                id_producto = int(input("Ingrese ID del producto a eliminar: "))
                inventario.eliminar_producto(id_producto)
            except ValueError:
                print(" Error: ID inválido.")
        # Opción 3: actualizar producto
        elif opcion == "3":
            try:
                id_producto = int(input("Ingrese ID del producto a actualizar: "))
                nueva_cantidad = input("Ingrese nueva cantidad (dejar vacío si no desea cambiar): ")
                nuevo_precio = input("Ingrese nuevo precio (dejar vacío si no desea cambiar): ")
               # Si el usuario escribió un valor, lo convertimos a número; si lo dejó vacío, lo ignoramos
                cantidad = int(nueva_cantidad) if nueva_cantidad else None
                precio = float(nuevo_precio) if nuevo_precio else None
                inventario.actualizar_producto(id_producto, cantidad, precio)
            except ValueError:
                print(" Error: datos inválidos.")
        # Opción 4: buscar producto
        elif opcion == "4":
            nombre = input("Ingrese nombre del producto a buscar: ")
            inventario.buscar_producto(nombre)
        # Opción 5: mostrar inventario completo
        elif opcion == "5":
            inventario.mostrar_productos()
        # Opción 6: salir del sistema
        elif opcion == "6":
            print(" Gracias por usar el sistema de Inventario. ¡Hasta luego!")
            break
        else:
            print(" Opción inválida. Intente nuevamente.")


# Punto de entrada del programa
# Aquí se inicia la ejecución del programa
if __name__ == "__main__":
    menu()
